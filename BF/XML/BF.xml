<!--@author Irena Bojanova(ivb)-->
<!--@date - 2/9/2022-->

<!-- an object contains data and has address, and size; the address and the size are data contained by other objects 
(the address specifically is the data of a pointer) - the data contained by this object and the other objects 
has value and type - we use this level to connect the classes-->

<BF Name="Bugs Framework">
	<Cluster Name="_INP" Type="Bug/Weakness">
		<Class Name="DVL" Title="Data Validation Bugs">
			<Operations>
				<Operation Name="Validate"/>
				<Operation Name="Sanitize"/>
				<AttributeType Name="Mechanism">
					<Attribute Name="Safelist"/>
					<Attribute Name="Denylist"/>
					<Attribute Name="Format"/>
					<Attribute Name="Length"/>
				</AttributeType>
				<AttributeType Name="Source Code">
					<Attribute Name="Codebase"/>
					<Attribute Name="Third Party"/>
					<Attribute Name="Standard Library"/>
					<Attribute Name="Compiler/Interpreter"/>
				</AttributeType>
				<AttributeType Name="Execution Space">
					<Attribute Name="Local"/>
					<Attribute Name="Admin"/>
					<Attribute Name="Bare-Metal"/>
				</AttributeType>
			</Operations>
			<Operands>
				<Operand Name="Data">
					<AttributeType Name="State">
						<Attribute Name="Entered"/>
						<Attribute Name="Stored"/>
						<Attribute Name="In Use"/>
						<Attribute Name="Transferred"/>
					</AttributeType>
				</Operand>
				<Operand Name="Policy"/>
			</Operands>
			<Causes>
				<BugCauseType Name="Improper Operation">
					<Cause Name="Missing"/>
					<Cause Name="Erroneous"/>
				</BugCauseType>
				<BugCauseType Name="Improper Policy">
					<Cause Name="Under-Restrictive Policy"/>
					<Cause Name="Over-Restrictive Policy"/>
				</BugCauseType>
				<WeaknessCauseType Name="Improper Data">
					<Cause Name="Corrupted Data"/>
					<Cause Name="Tampered Data"/>
				</WeaknessCauseType>
				<WeaknessCauseType Name="Improper Policy Data">
					<Cause Name="Corrupted Policy"/>
					<Cause Name="Tampered Policy"/>
				</WeaknessCauseType>
			</Causes>
			<Consequences>
				<WeaknessConsequenceType Name="Improper Data Type">
					<Consequence Name="Invalid Data"/>
				</WeaknessConsequenceType>
				<FinalErrorConsequenceType Name="Injection Error">
					<Consequence Name="Query Injection"/>
					<Consequence Name="Command Injection"/>
					<Consequence Name="Source Code Injection"/>
					<Consequence Name="Parameter Injection"/>
					<Consequence Name="File Injection"/>
				</FinalErrorConsequenceType>
			</Consequences>
		</Class>
		<Class Name="DVR" Title="Data Verification Bugs">
			<Operations>
				<Operation Name="Verify"/>
				<Operation Name="Correct"/>
				<AttributeType Name="Mechanism">
					<Attribute Name="Value"/>
					<Attribute Name="Quantity"/>
					<Attribute Name="Range"/>
					<Attribute Name="Type"/>
					<Attribute Name="Other Rules"/>
				</AttributeType>
				<AttributeType Name="Source Code">
					<Attribute Name="Codebase"/>
					<Attribute Name="Third Party"/>
					<Attribute Name="Standard Library"/>
					<Attribute Name="Compiler/Interpreter"/>
				</AttributeType>
				<AttributeType Name="Execution Space">
					<Attribute Name="Local"/>
					<Attribute Name="Admin"/>
					<Attribute Name="Bare-Metal"/>
				</AttributeType>
			</Operations>
			<Operands>
				<Operand Name="Data">
					<AttributeType Name="State">
						<Attribute Name="Entered"/>
						<Attribute Name="Stored"/>
						<Attribute Name="In Use"/>
						<Attribute Name="Transferred"/>
					</AttributeType>
				</Operand>
				<Operand Name="Policy"/>
			</Operands>
			<Causes>
				<BugCauseType Name="Improper Operation">
					<Cause Name="Missing"/>
					<Cause Name="Erroneous"/>
				</BugCauseType>
				<BugCauseType Name="Improper Policy">
					<Cause Name="Under-Restrictive Policy"/>
					<Cause Name="Over-Restrictive Policy"/>
				</BugCauseType>
				<WeaknessCauseType Name="Improper Data Type">
					<Cause Name="Invalid Data"/>
				</WeaknessCauseType>
			</Causes>
			<Consequences>
				<WeaknessConsequenceType Name="Improper Data Value">
					<Consequence Name="Wrong Value (_INP)"/>
					<Consequence Name="Inconsistent Value"/>
				</WeaknessConsequenceType>
				<WeaknessConsequenceType Name="Improper Data Type">
					<Consequence Name="Wrong Type (_INP)"/>
				</WeaknessConsequenceType>
			</Consequences>
		</Class>
	</Cluster>
	<Cluster Name="_DTC" Type="Bug/Weakness">
		<Class Name="DCL" Title="Declaration Bugs">
			<Operations>
				<Operation Name="Declare"/>
				<Operation Name="Define"/>
				<AttributeType Name="Mechanism">
					<Attribute Name="Simple"/>
					<Attribute Name="Generics"/>
					<Attribute Name="Overriding"/>
					<Attribute Name="Overloading"/>
				</AttributeType>
				<AttributeType Name="Source Code">
					<Attribute Name="Codebase"/>
					<Attribute Name="Third Party"/>
					<Attribute Name="Standard Library"/>
					<Attribute Name="Compiler/Interpreter"/>
				</AttributeType>
				<AttributeType Name="Entity">
					<Attribute Name="Object"/>
					<Attribute Name="Function"/>
					<Attribute Name="Data Type"/><!--XXXsame as operand
					-->
					<Attribute Name="Namespace"/>
				</AttributeType>
			</Operations>
			<Operands>
				<Operand Name="Data Type"><!--XXX-->
					<AttributeType Name="Data Type Kind">
						<Attribute Name="Primitive"/>
						<Attribute Name="Structure"/>
					</AttributeType>
				</Operand>
			</Operands>
			<Causes>
				<BugCauseType Name="Improper Operation">
					<Cause Name="Missing"/>
					<Cause Name="Wrong"/>
					<Cause Name="Erroneous"/>
				</BugCauseType>
				<BugCauseType Name="Improper Modifier">
					<Cause Name="Missing Modifier"/>
					<Cause Name="Wrong Modifier"/>
				</BugCauseType>
				<BugCauseType Name="Improper Scope">
					<Cause Name="Anonymous Scope"/>
					<Cause Name="Wrong Scope"/>
				</BugCauseType>
			</Causes>
			<Consequences>
				<WeaknessConsequenceType Name="Improper Data Type (_DTC)">
					<Consequence Name="Wrong Type (_DTC)"/>
					<Consequence Name="Incomplete Type"/>
					<Consequence Name="Wrong Generic Type"/>
					<Consequence Name="Confused Subtype"/>
					<Consequence Name="Wrong Argument Type"/>
				</WeaknessConsequenceType>
				<WeaknessConsequenceType Name="Improper Function">
					<Cause Name="Missing Overridden Function"/>
					<Cause Name="Missing Overloaded Function"/>
				</WeaknessConsequenceType>
				<FinalErrorConsequenceType Name="Access Error">
					<Consequence Name="Wrong Access Object"/>
					<Consequence Name="Wrong Access Type"/>
					<Consequence Name="Wrong Access Function"/>
				</FinalErrorConsequenceType>
			</Consequences>
		</Class>
		<Class Name="NRS" Title="Name Resolution Bugs">
			<Operations>
				<Operation Name="Refer"/>
				<Operation Name="Call"/>
				<AttributeType Name="Mechanism">
					<Attribute Name="Resolve"/>
					<Attribute Name="Bind"/>
					<Attribute Name="Early Bind"/>
					<Attribute Name="Late Bind"/>
					<Attribute Name="Ad-hoc Bind"/>
				</AttributeType>
				<AttributeType Name="Source Code">
					<Attribute Name="Codebase"/>
					<Attribute Name="Third Party"/>
					<Attribute Name="Standard Library"/>
					<Attribute Name="Compiler/Interpreter"/>
				</AttributeType>
				<AttributeType Name="Entity">
					<Attribute Name="Object"/>
					<Attribute Name="Function"/>
					<Attribute Name="Data Type"/>
					<Attribute Name="Namespace"/>
				</AttributeType>
			</Operations>
			<Operands>
				<Operand Name="Data Type">
					<AttributeType Name="Data Type Kind">
						<Attribute Name="Primitive"/>
						<Attribute Name="Structure"/>
					</AttributeType>
				</Operand>
				<Operand Name="Function"/>
			</Operands>
			<Causes>
				<BugCauseType Name="Improper Operation">
					<Cause Name="Erroneous"/>
				</BugCauseType>
				<BugCauseType Name="Improper Scope">
					<Cause Name="Missing Qualifier"/>
					<Cause Name="Wrong Qualifier"/>
				</BugCauseType>
				<WeaknessCauseType Name="Improper Data Type">
					<Cause Name="Incomplete Type"/>
					<Cause Name="Wrong Generic Type"/>
					<Cause Name="Confused Subtype"/>
					<Cause Name="Wrong Argument Type"/>
				</WeaknessCauseType>
				<WeaknessCauseType Name="Improper Function">
					<Cause Name="Missing Overridden Function"/>
					<Cause Name="Missing Overloaded Function"/>
				</WeaknessCauseType>
			</Causes>
			<Consequences>
				<WeaknessConsequenceType Name="Improper Object">
					<Consequence Name="Wrong Object Resolved"/>
				</WeaknessConsequenceType>
				<WeaknessConsequenceType Name="Improper Data Type (_DTC)">
					<Consequence Name="Wrong Type Resolved"/>
				</WeaknessConsequenceType>
				<WeaknessConsequenceType Name="Improper Function">
					<Consequence Name="Wrong Function Resolved"/>
					<Consequence Name="Wrong Generic Function Bound"/>
					<Consequence Name="Wrong Overridden Function Bound"/>
					<Consequence Name="Wrong Overloaded Function Bound"/>
				</WeaknessConsequenceType>
			</Consequences>
		</Class>
		<Class Name="TCV" Title="Type Conversion Bugs">
			<Operations>
				<Operation Name="Cast"/>
				<Operation Name="Coerce"/>
				<AttributeType Name="Mechanism">
					<Attribute Name="Pass In"/>
					<Attribute Name="Pass Out"/>
				</AttributeType>
				<AttributeType Name="Source Code">
					<Attribute Name="Codebase"/>
					<Attribute Name="Third Party"/>
					<Attribute Name="Standard Library"/>
					<Attribute Name="Compiler/Interpreter"/>
				</AttributeType>
			</Operations>
			<Operands>
				<Operand Name="Data Value">
					<AttributeType Name="Data Value Kind">
						<Attribute Name="Numeric"/>
						<Attribute Name="Text"/>
						<Attribute Name="Pointer"/>
						<Attribute Name="Boolean"/>
					</AttributeType>
				</Operand>
				<Operand Name="Data Type">
					<AttributeType Name="Data Type Kind">
						<Attribute Name="Primitive"/>
						<Attribute Name="Structure"/>
					</AttributeType>
				</Operand>
				<Operand Name="Function"/>
			</Operands>
			<Causes>
				<BugCauseType Name="Improper Operation">
					<Cause Name="Wrong"/>
					<Cause Name="Missing"/>
				</BugCauseType>
				<WeaknessCauseType Name="Improper Data Value">
					<Cause Name="Under Range"/>
					<Cause Name="Over Range"/>
					<Cause Name="Flipped Sign"/>
					<Cause Name="Wrong Object Resolved Value"/>
				</WeaknessCauseType>
				<WeaknessCauseType Name="Improper Data Type">
					<Cause Name="Wrong Type (_DTC)"/>
					<Cause Name="Wrong Object Resolved Type"/>
					<Cause Name="Mismatched Argument"/>
				</WeaknessCauseType>
				<WeaknessCauseType Name="Improper Function">
					<Cause Name="Missing Overloaded Function"/>
				</WeaknessCauseType>
			</Causes>
			<Consequences>
				<WeaknessConsequenceType Name="Improper Data Value">
					<Consequence Name="Wrong Value"/>
					<Consequence Name="Truncated Value"/>
					<Consequence Name="Distorted Value"/>
					<Consequence Name="Rounded Value"/>
				</WeaknessConsequenceType>
				<WeaknessConsequenceType Name="Improper Data Type">
					<Consequence Name="Wrong Type (_DTC)"/>
				</WeaknessConsequenceType>
			</Consequences>
		</Class>
		<Class Name="TCM" Title="Type Computation Bugs">
			<Operations>
				<Operation Name="Calculate"/>
				<Operation Name="Evaluate"/>
				<AttributeType Name="Mechanism (TCM)">
					<Attribute Name="Function"/>
					<Attribute Name="Operator"/>
					<Attribute Name="Method"/>
					<!-- (for classes)-->
					<Attribute Name="Lambda Expression"/>
					<Attribute Name="Procedure"/>
				</AttributeType>
				<AttributeType Name="Source Code">
					<Attribute Name="Codebase"/>
					<Attribute Name="Third Party"/>
					<Attribute Name="Standard Library"/>
					<Attribute Name="Compiler/Interpreter"/>
				</AttributeType>
			</Operations>
			<Operands>
				<Operand Name="Data Value">
					<AttributeType Name="Data Value Kind">
						<Attribute Name="Numeric"/>
						<Attribute Name="Text"/>
						<Attribute Name="Pointer"/>
						<Attribute Name="Boolean"/>
					</AttributeType>
				</Operand>
				<Operand Name="Data Type">
					<AttributeType Name="Data Type Kind">
						<Attribute Name="Primitive"/>
						<Attribute Name="Structure"/>
					</AttributeType>
				</Operand>
				<Operand Name="Function"/>
			</Operands>
			<Causes>
				<BugCauseType Name="Improper Operation">
					<Cause Name="Wrong"/>
					<Cause Name="Erroneous (_DTC)"/>
				</BugCauseType>
				<WeaknessCauseType Name="Improper Data Value">
					<Cause Name="Wrong Value"/>
					<Cause Name="Zero (0)"/>
				</WeaknessCauseType>
				<WeaknessCauseType Name="Improper Data Value">
					<Cause Name="Wrong Argument Value"/>
					<Cause Name="Wrong Object Resolved Value"/>
					<Cause Name="Reference vs. Object"/>
				</WeaknessCauseType>
				<WeaknessCauseType Name="Improper Data Type">
					<Cause Name="Wrong Type (_DTC)"/>
					<Cause Name="Wrong Object Resolved Type"/>
				</WeaknessCauseType>
				<WeaknessCauseType Name="Improper Function">
					<Cause Name="Wrong Function Resolved"/>
					<Cause Name="Wrong Generic Function Bound"/>
					<Cause Name="Wrong Overridden Function Bound"/>
					<Cause Name="Wrong Overloaded Function Bound"/>
				</WeaknessCauseType>
			</Causes>
			<Consequences>
				<WeaknessConsequenceType Name="Improper Data Value">
					<Consequence Name="Under Range"/>
					<Consequence Name="Over Range"/>
					<Consequence Name="Flipped Sign"/>
					<Consequence Name="Wrong Result"/>
					<Consequence Name="Wrap Around"/>
				</WeaknessConsequenceType>
				<FinalErrorConsequenceType Name="Type Compute Error">
					<Consequence Name="Undefined"/>
				</FinalErrorConsequenceType>
			</Consequences>
		</Class>
	</Cluster>
	<Cluster Name="_MEM" Type="Bug/Weakness">
		<Class Name="MAD" Title="Memory Addressing Bugs">
			<Operations>
				<Operation Name="Initialize"/>
				<Operation Name="Reposition"/>
				<Operation Name="Reassign"/>
				<AttributeType Name="Mechanism">
					<Attribute Name="Direct"/>
					<Attribute Name="Sequential"/>
				</AttributeType>
				<AttributeType Name="Source Code">
					<Attribute Name="Codebase"/>
					<Attribute Name="Third Party"/>
					<Attribute Name="Standard Library"/>
					<Attribute Name="Compiler/Interpreter"/>
				</AttributeType>
				<AttributeType Name="Execution Space">
					<Attribute Name="Userland"/>
					<Attribute Name="Kernel"/>
					<Attribute Name="Bare-Metal"/>
				</AttributeType>
			</Operations>
			<Operands>
				<Operand Name="Object Address">
					<!--in MEM paper, this is operand Object-->
					<AttributeType Name="Location">
						<Attribute Name="Stack"/>
						<Attribute Name="Heap"/>
						<Attribute Name="/other/"/>
					</AttributeType>
				</Operand>
				<Operand Name="Object Size"/>
				<!--in  MEM paper, the above is operand Pointer-->
				<!--Object - has address and Size1
					Value
						Index - is proxy to address, has value and type
						Size2 - is proxy to Size 1, has value (that becomes Size1) and type
					Type
						Index - is proxy to address, has value and type
						Size2 - is proxy to Size 1, has value (that becomes Size1) and type
					Address
						Pointer - property of object ???type???
					Size1 - property of object
				//////////////
				Size1 - requested/actually allocated size - that's now the size of the real object
				VS 
				Size2 - needed/what should have been allocated size - that's just a number now-->
			</Operands>
			<Causes>
				<BugCauseType Name="Improper Operation">
					<Cause Name="Missing"/>
					<Cause Name="Mismatched"/>
					<Cause Name="Erroneous (_MEM)"/>
				</BugCauseType>
				<WeaknessCauseType Name="Improper Data Value">
					<Cause Name="Hardcoded Address"/>
					<Cause Name="Wrong Index"/>
					<Cause Name="Wrong Size Used"/>
				</WeaknessCauseType>
				<WeaknessCauseType Name="Improper Data Type">
					<Cause Name="Wrong Index Type"/>
					<Cause Name="Casted Pointer"/>
				</WeaknessCauseType>
				<WeaknessCauseType Name="Improper Object Address">
					<Cause Name="NULL Pointer"/>
					<Cause Name="Wild Pointer"/>
					<Cause Name="Dangling Pointer"/>
					<Cause Name="Untrusted Pointer"/>
					<Cause Name="Under Bounds Pointer"/>
					<Cause Name="Wrong Position Pointer"/>
					<Cause Name="Over Bounds Pointer"/>
				</WeaknessCauseType>
				<WeaknessCauseType Name="Improper Object Size">
					<Cause Name="Not Enough Memory Allocated"/>
					<!--Size1-->
				</WeaknessCauseType>
			</Causes>
			<Consequences>
				<WeaknessConsequenceType Name="Improper Data Value">
					<Consequence Name="Forbidden Address"/>
				</WeaknessConsequenceType>
				<WeaknessConsequenceType Name="Improper Data Type">
					<Consequence Name="Casted Pointer"/>
				</WeaknessConsequenceType>
				<WeaknessConsequenceType Name="Improper Object Address">
					<Consequence Name="NULL Pointer"/>
					<Consequence Name="Wild Pointer"/>
					<Consequence Name="Dangling Pointer"/>
					<Consequence Name="Untrusted Pointer"/>
					<Consequence Name="Under Bounds Pointer"/>
					<Consequence Name="Over Bounds Pointer"/>
					<Consequence Name="Wrong Position Pointer"/>
				</WeaknessConsequenceType>
			</Consequences>
		</Class>
		<Class Name="MAL" Title="Memory Allocation Bugs">
			<Operations>
				<Operation Name="Allocate"/>
				<Operation Name="Extend"/>
				<Operation Name="Reallocate-Extend"/>
				<AttributeType Name="Mechanism">
					<Attribute Name="Implicit"/>
					<Attribute Name="Explicit"/>
				</AttributeType>
				<AttributeType Name="Source Code">
					<Attribute Name="Codebase"/>
					<Attribute Name="Third Party"/>
					<Attribute Name="Standard Library"/>
					<Attribute Name="Compiler/Interpreter"/>
				</AttributeType>
				<AttributeType Name="Execution Space">
					<Attribute Name="Userland"/>
					<Attribute Name="Kernel"/>
					<Attribute Name="Bare-Metal"/>
				</AttributeType>
			</Operations>
			<Operands>
				<Operand Name="Object Address">
					<AttributeType Name="Ownership">
						<Attribute Name="None"/>
						<Attribute Name="Single"/>
						<Attribute Name="Shared"/>
					</AttributeType>
					<AttributeType Name="Location">
						<Attribute Name="Stack"/>
						<Attribute Name="Heap"/>
						<Attribute Name="/other/"/>
					</AttributeType>
				</Operand>
				<Operand Name="Object Size"/>
			</Operands>
			<Causes>
				<BugCauseType Name="Improper Operation">
					<Cause Name="Missing"/>
					<Cause Name="Mismatched"/>
					<Cause Name="Erroneous (_MEM)"/>
				</BugCauseType>

				<WeaknessCauseType Name="Improper Data Value">
					<Cause Name="Hardcoded Address"/>
					<Cause Name="Forbidden Address"/>
					<Cause Name="Single Owned Object Address"/>
					<Cause Name="Wrong Size Used"/>
				</WeaknessCauseType>
				<WeaknessCauseType Name="Improper Object Address">
					<Cause Name="Wild Pointer"/>
					<Cause Name="Dangling Pointer"/>
					<Cause Name="Wrong Position Pointer"/>
				</WeaknessCauseType>
			</Causes>
			<Consequences>
				<WeaknessConsequenceType Name="Improper Object Address">
					<Consequence Name="NULL Pointer"/>
					<Consequence Name="Wild Pointer"/>
				</WeaknessConsequenceType>
				<WeaknessConsequenceType Name="Improper Object Size">
					<Consequence Name="Not Enough Memory Allocated"/>
					<!--xxx Wrong Size Memory Allocated - not enough; too much; or just add Too Much Memory Allocated ???-->
				</WeaknessConsequenceType>
				<FinalErrorConsequenceType Name="Memory Error">
					<Consequence Name="Memory Overflow"/>
					<Consequence Name="Memory Leak"/>
					<Consequence Name="Double Free"/>
					<Consequence Name="Object Corruption"/>
				</FinalErrorConsequenceType>
			</Consequences>
		</Class>
		<Class Name="MUS" Title="Memory Use Bugs" Definition="An object is initialized, read, written, or cleared improperly.">
			<Operations>
				<Operation Name="Initialize"/>
				<Operation Name="Dereference"/>
				<Operation Name="Read"/>
				<Operation Name="Write"/>
				<Operation Name="Clear"/>
				<AttributeType Name="Mechanism">
					<Attribute Name="Direct"/>
					<Attribute Name="Sequential"/>
				</AttributeType>
				<AttributeType Name="Source Code">
					<Attribute Name="Codebase"/>
					<Attribute Name="Third Party"/>
					<Attribute Name="Standard Library"/>
					<Attribute Name="Compiler/Interpreter"/>
				</AttributeType>
				<AttributeType Name="Execution Space">
					<Attribute Name="Userland"/>
					<Attribute Name="Kernel"/>
					<Attribute Name="Bare-Metal"/>
				</AttributeType>
			</Operations>
			<Operands>
				<Operand Name="Object Address">
					<AttributeType Name="Span" Definition="xxx">
						<Attribute Name="Litle"/>
						<Attribute Name="Moderate"/>
						<Attribute Name="Huge"/>
					</AttributeType>
					<AttributeType Name="Location">
						<Attribute Name="Stack"/>
						<Attribute Name="Heap"/>
						<Attribute Name="/other/"/>
					</AttributeType>
				</Operand>
				<Operand Name="Object Size"/>
			</Operands>
			<Causes>
				<BugCauseType Name="Improper Operation">
					<Cause Name="Missing"/>
					<Cause Name="Mismatched"/>
					<Cause Name="Erroneous (_MEM)"/>
				</BugCauseType>

				<WeaknessCauseType Name="Improper Data Value">
					<Cause Name="Forbidden Address"/>
					<Cause Name="Wrong Size Used"/>
				</WeaknessCauseType>
				<WeaknessCauseType Name="Improper Data Type">
					<Cause Name="Casted Pointer"/>
				</WeaknessCauseType>
				<WeaknessCauseType Name="Improper Object Address">
					<Cause Name="NULL Pointer"/>
					<Cause Name="Wild Pointer"/>
					<Cause Name="Dangling Pointer"/>
					<Cause Name="Untrusted Pointer"/>
					<Cause Name="Under Bounds Pointer"/>
					<Cause Name="Over Bounds Pointer"/>
					<Cause Name="Wrong Position Pointer"/>
				</WeaknessCauseType>
				<WeaknessCauseType Name="Improper Object Size">
					<Cause Name="Not Enough Memory Allocated"/>
				</WeaknessCauseType>
			</Causes>
			<Consequences>
				<FinalErrorConsequenceType Name="Memory Error">
					<Consequence Name="Uninitialized Object"/>
					<Consequence Name="Not Cleared Object"/>
					<Consequence Name="NULL Pointer Dereference"/>
					<Consequence Name="Untrusted Pointer Dereference"/>
					<Consequence Name="Object Corruption"/>
					<Consequence Name="Type Confusion"/>
					<Consequence Name="Use After Free"/>
					<Consequence Name="Buffer Overflow"/>
					<Consequence Name="Buffer Underflow"/>
					<Consequence Name="Uninitialized Pointer Dereference"/>
				</FinalErrorConsequenceType>
			</Consequences>
		</Class>
		<Class Name="MDL" Title="Memory Deallocation Bugs">
			<Operations>
				<Operation Name="Deallocate"/>
				<Operation Name="Reduce"/>
				<Operation Name="Reallocate-Reduce"/>
				<AttributeType Name="Mechanism">
					<Attribute Name="Implicit"/>
					<Attribute Name="Explicit"/>
				</AttributeType>
				<AttributeType Name="Source Code">
					<Attribute Name="Codebase"/>
					<Attribute Name="Third Party"/>
					<Attribute Name="Standard Library"/>
					<Attribute Name="Compiler/Interpreter"/>
				</AttributeType>
				<AttributeType Name="Execution Space">
					<Attribute Name="Userland"/>
					<Attribute Name="Kernel"/>
					<Attribute Name="Bare-Metal"/>
				</AttributeType>
			</Operations>
			<Operands>
				<Operand Name="Object Address">
					<AttributeType Name="Ownership">
						<Attribute Name="None"/>
						<Attribute Name="Single"/>
						<Attribute Name="Shared"/>
					</AttributeType>
					<AttributeType Name="Location">
						<Attribute Name="Stack"/>
						<Attribute Name="Heap"/>
						<Attribute Name="/other/"/>
					</AttributeType>
				</Operand>
				<Operand Name="Object Size"/>
			</Operands>
			<Causes>
				<BugCauseType Name="Improper Operation">
					<Cause Name="Missing"/>
					<Cause Name="Mismatched"/>
					<Cause Name="Erroneous (_MEM)"/>
				</BugCauseType>
				<WeaknessCauseType Name="Improper Data Value">
					<Cause Name="Hardcoded Address"/>
					<Cause Name="Forbidden Address"/>
					<Cause Name="Wrong Size Used"/>
				</WeaknessCauseType>
				<WeaknessCauseType Name="Improper Object Address">
					<Cause Name="Wild Pointer"/>
					<Cause Name="Dangling Pointer"/>
					<Cause Name="Wrong Position Pointer"/>
				</WeaknessCauseType>
				<WeaknessCauseType Name="Improper Object Size">
					<Cause Name="Not Enough Memory Allocated"/>
				</WeaknessCauseType>
			</Causes>
			<Consequences>
				<WeaknessConsequenceType Name="Improper Object Address">
					<Consequence Name="NULL Pointer"/>
				</WeaknessConsequenceType>
				<WeaknessConsequenceType Name="Improper Object Size">
					<Consequence Name="Not Enough Memory Allocated"/>
				</WeaknessConsequenceType>
				<FinalErrorConsequenceType Name="Memory Error">
					<Consequence Name="Memory Leak"/>
					<Consequence Name="Double Free"/>
					<Consequence Name="Object Corruption"/>
				</FinalErrorConsequenceType>
			</Consequences>
		</Class>
	</Cluster>
	<Cluster Name="_CRY" Type="Bug/Weakness">
		<Class Name="ENC" Title="Encryption Bugs">
			<Operations>
				<Operation Name="Encrypt"/>
				<Operation Name="Decrypt"/>
				<AttributeType Name="Mechanism">
					<Attribute Name="xxx"/>
					<Attribute Name="xxx"/>
				</AttributeType>
				<AttributeType Name="Source Code">
					<Attribute Name="Codebase"/>
					<Attribute Name="Third Party"/>
					<Attribute Name="Standard Library"/>
					<Attribute Name="Compiler/Interpreter"/>
				</AttributeType>
				<AttributeType Name="Execution Space">
					<Attribute Name="Userland"/>
					<Attribute Name="Kernel"/>
					<Attribute Name="Bare-Metal"/>
				</AttributeType>
			</Operations>
			<Operands>
				<Operand Name="Data">
					<AttributeType Name="Sensitive Data" Definition="xxx">
						<Attribute Name="Secret"/>
						<Attribute Name="Public"/>
					</AttributeType>
					<AttributeType Name="State">
						<Attribute Name="Stored"/>
						<Attribute Name="xxx??? In Use"/>
						<Attribute Name="Transferred"/>
					</AttributeType>
				</Operand>
				<Operand Name="Key(s)">
					<AttributeType Name="Type" Definition="xxx">
						<Attribute Name="Private Key"/>
						<Attribute Name="Secrete Key"/>
						<Attribute Name="Shared Key"/>
						<Attribute Name="Public Key"/>
					</AttributeType>
				</Operand>
				<Operand Name="Algorithm" Definition="Operation Rule.">
					<AttributeType Name="Type" Definition="xxx">
						<Attribute Name="Symmetric"/>
						<Attribute Name="Asymmetric"/>
					</AttributeType>
				</Operand>
			</Operands>
			<Causes>
				<BugCauseType Name="Improper Operation">
					<Cause Name="Missing"/>
					<Cause Name="Erroneous (_CRY)"/>
				</BugCauseType>
				<BugCauseType Name="Improper Algorithm" Definition="The Bug">
					<Cause Name="Modified Algorithm - xxx removed/changes/added step"/>
					<Cause Name="Inadequate Algorithm"/>
					<Cause Name="Weak Algorithm - including 'Insecure Mode of Operation' - we have it as 'leading to weak algorithm' on the old graph, but is it?"/>
					<Cause Name="Risky/Broken Algorithm"/>
				</BugCauseType>
				<WeaknessCauseType Name="Improper Key"  Definition="">
					<Cause Name="Known Key"/>
					<Cause Name="xxx Exposed Key - have to be conseqeunce from IEX failure form a previous Vulnerability"/>
				</WeaknessCauseType>
			</Causes>
			<Consequences>
				<WeaknessConsequenceType Name="Improper Key" Definition="xxx">
					<Consequence Name="xxxKnown Key - for KMN"/>
					<Consequence Name="xxxKnown Random Number - for KMN"/>
				</WeaknessConsequenceType>
				<FinalErrorConsequenceType Name="xxxSecurity Error - xxx leads to IEX" Definition="">
					<Consequence Name="xxxConfidentiality Error - leads to IEX of Data"/>
					<Consequence Name="xxx~Integrity Error -in some modes of encryption"/>
					<Consequence Name="xxx~Identity Authentication Error -in some modes of encryption"/>
				</FinalErrorConsequenceType>
			</Consequences>
		</Class>
		<Class Name="VRF" Title="Verification Bugs" Definition="Data is signed, source is checked and proved, or data is assured to be unaltered improperly.">
			<Operations>
				<Operation Name="Sign"/>
				<Operation Name="xxx Verify Signiture - Verify is oeration of DVR; here the operation is specific for _CRY 'Verify Signitire' Verify Signiture"/>
				<AttributeType Name="Mechanism">
					<Attribute Name="xxx"/>
					<Attribute Name="xxx"/>
				</AttributeType>
				<AttributeType Name="Source Code">
					<Attribute Name="Codebase"/>
					<Attribute Name="Third Party"/>
					<Attribute Name="Standard Library"/>
					<Attribute Name="Compiler/Interpreter"/>
				</AttributeType>
				<AttributeType Name="Execution Space">
					<Attribute Name="Userland"/>
					<Attribute Name="Kernel"/>
					<Attribute Name="Bare-Metal"/>
				</AttributeType>
			</Operations>
			<Operands>
				<Operand Name="Data">
					<AttributeType Name="Sensitive Data" Definition="xxx">
						<Attribute Name="Credentials"/>
						<Attribute Name="System Data"/>
						<Attribute Name="State Data"/>
						<Attribute Name="Cryptographic Data"/>
						<Attribute Name="Digital Documents"/>
					</AttributeType>
					<AttributeType Name="State">
						<Attribute Name="Stored"/>
						<Attribute Name="xxx???In Use"/>
						<Attribute Name="Transferred"/>
					</AttributeType>
				</Operand>
				<Operand Name="Key(s)">
					<AttributeType Name="Type" Definition="xxx">
						<Attribute Name="Private Key"/>
						<Attribute Name="Secrete Key"/>
						<Attribute Name="Public Key"/>
					</AttributeType>
				</Operand>
				<Operand Name="Random Number">
					<Attribute Name="True Random Number"/>
					<Attribute Name="Pseudo Random Number"/>
				</Operand>
				<Operand Name="Algorithm" Definition="Operation Rule.">
					<AttributeType Name="Type" Definition="xxx">
						<Attribute Name="Hash Function + PRN"/>
						<Attribute Name="MAC" Definition="Message Authentication Code"/>
						<Attribute Name="Digital Signature"/>
					</AttributeType>
				</Operand>
			</Operands>
			<Causes>
				<BugCauseType Name="Improper Operation">
					<Cause Name="Missing"/>
					<Cause Name="Erroneous (_CRY)"/>
				</BugCauseType>
				<BugCauseType Name="Improper Algorithm" Definition="The Bug">
					<Cause Name="Modified Algorithm"/>
					<Cause Name="Inadequate Algorithm"/>
					<Cause Name="Weak Algorithm"/>
					<Cause Name="Risky/Broken Algorithm"/>
				</BugCauseType>
				<WeaknessCauseType Name="Improper Key"  Definition="">
					<Cause Name="Weak Key"/>
					<Cause Name="Known Key"/>
				</WeaknessCauseType>
				<WeaknessCauseType Name="Improper Random Number"  Definition="">
					<Cause Name="Inadequate Random Number"/>
					<Cause Name="Predictable Random Number"/>
					<Cause Name="Known Random Number"/>
				</WeaknessCauseType>
			</Causes>
			<Consequences>
				<WeaknessConsequenceType Name="Improper Key" Definition="xxx">
					<Consequence Name="Unverified Key"/>
				</WeaknessConsequenceType>
				<FinalErrorConsequenceType Name="xxxSecurity Error - leads to IEX" Definition="">
					<Consequence Name="Integrity Authentication Error" Definition="Unverified Data"/>
					<Consequence Name="Identity Authentication Error" Definition="Unverified Identity"/>
					<Consequence Name="Origin Non-Repudiation Error" Definition="Unverified Origin Origin (Signer)"/>
				</FinalErrorConsequenceType>
			</Consequences>
		</Class>
		<Class Name="KMN" Title="Key Management Bugs" Definition="Cryptographic keys and other keying material are generated, stored, distributed, used, or destroyed improperly.">
			<Operations>
				<Operation Name="Generate/Select"/>
				<Operation Name="Store"/>
				<Operation Name="Distribute"/>
				<Operation Name="Use"/>
				<Operation Name="Destroy"/>
				<AttributeType Name="Mechanism">
					<Attribute Name="xxx"/>
					<Attribute Name="xxx"/>
				</AttributeType>
				<AttributeType Name="Source Code">
					<Attribute Name="Codebase"/>
					<Attribute Name="Third Party"/>
					<Attribute Name="Standard Library"/>
					<Attribute Name="Compiler/Interpreter"/>
				</AttributeType>
				<AttributeType Name="Execution Space">
					<Attribute Name="Userland"/>
					<Attribute Name="Kernel"/>
					<Attribute Name="Bare-Metal"/>
				</AttributeType>
			</Operations>
			<Operands>
				<Operand Name="Data">
					<AttributeType Name="Cryptographic Data" Definition="xxx">
						<Attribute Name="Hashes"/>
						<Attribute Name="Keying Material"/>
						<Attribute Name="Digital Certificate"/>
					</AttributeType>
					<AttributeType Name="State">
						<Attribute Name="Stored"/>
						<Attribute Name="xxx???In Use"/>
						<Attribute Name="Transferred"/>
					</AttributeType>
				</Operand>
				<Operand Name="Key(s)">
					<AttributeType Name="Type" Definition="xxx">
						<Attribute Name="Private Key"/>
						<Attribute Name="Secrete Key"/>
						<Attribute Name="Shared Key"/>
						<Attribute Name="Public Key"/>
					</AttributeType>
				</Operand>
				<Operand Name="Random Number" Definition="xxx">
					<Attribute Name="True Random Number"/>
					<Attribute Name="Pseudo Random Number"/>
				</Operand>
				<Operand Name="Algorithm" Definition="Operation Rule: xxx">
					<Attribute Name="Hash Function + PRN"/>
					<Attribute Name="MAC" Definition="Message Authentication Code"/>
					<Attribute Name="RSA" Definition="Rivest–Shamir–Adleman"/>
					<Attribute Name="Digital Signature"/>
				</Operand>
			</Operands>
			<Causes>
				<BugCauseType Name="Improper Operation">
					<Cause Name="Missing"/>
					<Cause Name="Erroneous (_CRY)"/>
				</BugCauseType>
				<BugCauseType Name="Improper Algorithm" Definition="The Bug">
					<Cause Name="Modified Algorithm"/>
					<Cause Name="Inadequate Algorithm"/>
					<Cause Name="Weak Algorithm"/>
					<Cause Name="Risky/Broken Algorithm"/>
				</BugCauseType>
				<WeaknessCauseType Name="Improper Key"  Definition="">
					<Cause Name="Weak Key"/>
					<Cause Name="Known Key"/>
				</WeaknessCauseType>
				<WeaknessCauseType Name="Improper Random Number"  Definition="">
					<Cause Name="Inadequate Random Number"/>
					<Cause Name="Predictable Random Number"/>
					<Cause Name="Known Random Number"/>
				</WeaknessCauseType>
			</Causes>
			<Consequences>
				<WeaknessConsequenceType Name="Improper Key" Definition="xxx">
					<Consequence Name="Weak Public Key - xxx ENC algorithm - Known Private Key"/>
					<Consequence Name="Weak Secret Key"/>
				</WeaknessConsequenceType>
			</Consequences>
		</Class>
	</Cluster>
	<Cluster Name="_RND" Type="Bug/Weakness">
		<Class Name="TRN" Title="True-Random Number Bugs">
			<Operands>
				<Operand Name="xxx"/>
			</Operands>
			<Causes>
				<BugCauseType Name="Improper Operation">
					<Cause Name="xxx"/>
				</BugCauseType>
				<WeaknessCauseType Name="Improper Data Value">
					<Cause Name="xxx"/>
				</WeaknessCauseType>
			</Causes>
			<Consequences>
				<WeaknessConsequenceType Name="Improper Data Type" Definition="xxx">
					<Consequence Name="xxx"/>
				</WeaknessConsequenceType>
				<FinalErrorConsequenceType Name="xxx Error" Definition="">
					<Consequence Name="xxx Error"/>
				</FinalErrorConsequenceType>
			</Consequences>
		</Class>
		<Class Name="PRN" Title="Pseudo-Random Number Bugs">
			<Operands>
				<Operand Name="xxx"/>
			</Operands>
			<Causes>
				<BugCauseType Name="Improper Operation">
					<Cause Name="xxx"/>
				</BugCauseType>
				<WeaknessCauseType Name="Improper Data Value">
					<Cause Name="xxx"/>
				</WeaknessCauseType>
			</Causes>
			<Consequences>
				<WeaknessConsequenceType Name="Improper Data Type" Definition="xxx">
					<Consequence Name="xxx"/>
				</WeaknessConsequenceType>
				<FinalErrorConsequenceType Name="xxx Error" Definition="">
					<Consequence Name="xxx Error"/>
				</FinalErrorConsequenceType>
			</Consequences>
		</Class>
	</Cluster>

	<Cluster Name="_ACC" Type="Bug/Weakness" Definition="Access Control Bugs (incl. xxx Errors)">
		<Class Name="ATN" Title="Authentication Bugs" Definition="xxx">
			<Operands>
				<Operand Name="xxx"/>
			</Operands>
			<Causes>
				<BugCauseType Name="Improper Operation">
					<Cause Name="xxx"/>
				</BugCauseType>
				<WeaknessCauseType Name="Improper Data Value">
					<Cause Name="xxx"/>
				</WeaknessCauseType>
			</Causes>
			<Consequences>
				<WeaknessConsequenceType Name="Improper Data Type" Definition="xxx">
					<Consequence Name="xxx"/>
				</WeaknessConsequenceType>
				<FinalErrorConsequenceType Name="xxx Error" Definition="">
					<Consequence Name="xxx Error"/>
				</FinalErrorConsequenceType>
			</Consequences>
		</Class>
		<Class Name="ATZ" Title="Authorization Bugs" Definition="xxx">
			<Operands>
				<Operand Name="xxx"/>
			</Operands>
			<Causes>
				<BugCauseType Name="Improper Operation">
					<Cause Name="xxx"/>
				</BugCauseType>
				<WeaknessCauseType Name="Improper Data Value">
					<Cause Name="xxx"/>
				</WeaknessCauseType>
			</Causes>
			<Consequences>
				<WeaknessConsequenceType Name="Improper Data Type" Definition="xxx">
					<Consequence Name="xxx"/>
				</WeaknessConsequenceType>
				<FinalErrorConsequenceType Name="xxx Error" Definition="">
					<Consequence Name="xxx Error"/>
				</FinalErrorConsequenceType>
			</Consequences>
		</Class>
	</Cluster>

	<Cluster Name="_CON" Type="Bug/Weakness" Definition="Concurency Bugs (incl. xxx Errors)">
		<Class Name="CON1" Title="xxx" Definition="xxx">
			<Operands>
				<Operand Name="xxx"/>
			</Operands>
			<Causes>
				<BugCauseType Name="Improper Operation">
					<Cause Name="xxx"/>
				</BugCauseType>
				<WeaknessCauseType Name="Improper Data Value">
					<Cause Name="xxx"/>
				</WeaknessCauseType>
			</Causes>
			<Consequences>
				<WeaknessConsequenceType Name="Improper Data Type" Definition="xxx">
					<Consequence Name="xxx"/>
				</WeaknessConsequenceType>
				<FinalErrorConsequenceType Name="xxx Error" Definition="">
					<Consequence Name="xxx Error"/>
				</FinalErrorConsequenceType>
			</Consequences>
		</Class>
		<Class Name="CON2" Title="xxx" Definition="xxx">
			<Operands>
				<Operand Name="xxx"/>
			</Operands>
			<Causes>
				<BugCauseType Name="Improper Operation">
					<Cause Name="xxx"/>
				</BugCauseType>
				<WeaknessCauseType Name="Improper Data Value">
					<Cause Name="xxx"/>
				</WeaknessCauseType>
			</Causes>
			<Consequences>
				<WeaknessConsequenceType Name="Improper Data Type" Definition="xxx">
					<Consequence Name="xxx"/>
				</WeaknessConsequenceType>
				<FinalErrorConsequenceType Name="xxx Error" Definition="">
					<Consequence Name="xxx Error"/>
				</FinalErrorConsequenceType>
			</Consequences>
		</Class>
	</Cluster>

	<Cluster Name="_CFL" Type="Bug/Weakness" Definition="Control Flow Bugs (incl. xxx Errors)">
		<Class Name="CFL1" Title="xxx" Definition="xxx">
			<Operands>
				<Operand Name="xxx"/>
			</Operands>
			<Causes>
				<BugCauseType Name="Improper Operation">
					<Cause Name="xxx"/>
				</BugCauseType>
				<WeaknessCauseType Name="Improper Data Value">
					<Cause Name="xxx"/>
				</WeaknessCauseType>
			</Causes>
			<Consequences>
				<WeaknessConsequenceType Name="Improper Data Type" Definition="xxx">
					<Consequence Name="xxx"/>
				</WeaknessConsequenceType>
				<FinalErrorConsequenceType Name="xxx Error" Definition="">
					<Consequence Name="xxx Error"/>
				</FinalErrorConsequenceType>
			</Consequences>
		</Class>
		<Class Name="CFL2" Title="xxx" Definition="xxx">
			<Operands>
				<Operand Name="xxx"/>
			</Operands>
			<Causes>
				<BugCauseType Name="Improper Operation">
					<Cause Name="xxx"/>
				</BugCauseType>
				<WeaknessCauseType Name="Improper Data Value">
					<Cause Name="xxx"/>
				</WeaknessCauseType>
			</Causes>
			<Consequences>
				<WeaknessConsequenceType Name="Improper Data Type" Definition="xxx">
					<Consequence Name="xxx"/>
				</WeaknessConsequenceType>
				<FinalErrorConsequenceType Name="xxx Error" Definition="">
					<Consequence Name="xxx Error"/>
				</FinalErrorConsequenceType>
			</Consequences>
		</Class>
	</Cluster>

	<!--Failures should have only Causes and Atributes
We were discussing that a Failure would be like a class - again with causes and consequences; and the causes are the final errors from previous weakness, the consequences are the risks.
Or maybe Failures have only Cause and Attributes?
So far I dont think failure have consequences. I think it is only cause (final errors)-->
	<Cluster Name="_FLR" Type="Failure" Definition="">
		<Class Name="IEX" Title="Information Exposure">
			<Operations>
				<Operation Name="IEX Operation"/>
			</Operations>
			<Causes>
				<FianalErrorCauseType Name="Memory Error" Definition="">
					<Cause Name="Buffer Overflow"/>
					<Cause Name="Buffer Underflow"/>
					<Cause Name="Not Cleared Object"/>
				</FianalErrorCauseType>
			</Causes>
			<Consequences>
				<RiskConsequenceType Name="Risk" Definition="">
					<Consequence Name="IEX Conseqeunce"/>
				</RiskConsequenceType>
			</Consequences>
		</Class>
		<Class Name="RCE" Title="Remote Code Execution">
			<Operations>
				<Operation Name="RCE Operation"/>
			</Operations>
			<Causes>
				<FianalErrorCauseType Name="Memory Error" Definition="">
					<Cause Name="Buffer Overflow"/>
					<Cause Name="Buffer Underflow"/>
				</FianalErrorCauseType>
			</Causes>
			<Consequences>
				<RiskConsequenceType Name="Risk" Definition="">
					<Consequence Name="RCE Conseqeunce"/>
				</RiskConsequenceType>
			</Consequences>
		</Class>
		<Class Name="DOS" Title="Denial of Service">
			<Operations>
				<Operation Name="DOS Operation"/>
			</Operations>
			<Causes>
				<FianalErrorCauseType Name="Memory Error" Definition="">
					<Cause Name="Buffer Overflow"/>
					<Cause Name="Buffer Underflow"/>
				</FianalErrorCauseType>
			</Causes>
			<Consequences>
				<RiskConsequenceType Name="Risk" Definition="">
					<Consequence Name="DOS Conseqeunce"/>
				</RiskConsequenceType>
			</Consequences>
		</Class>
	</Cluster>

	<!-- generate from publications tables 
\newline 
nothing

remove text between tables
remove \code \tcode \mbox \textit{

Reg Exprs
	remove empty rows
	^\s*\n
	nothing
	<Definition
	remove comments
	%.*\n
	nothing

	remove Overleaf commands
	\s*\\.*\n
	nothing

	generate
	^(.+?)\s*&\s*\n(.+?)[^&]\s*\n
	<Definition Name="$1">$2</Definition>\n 
-->

	<Definitions>
		<!-- Clusters-->
		<Definition Name="_INP">Input/Output Check Bugs (incl. Injection Error)</Definition>
		<Definition Name="_DTC">Data Type Bugs (incl. Convert and Compute Errors)"></Definition>
		<Definition Name="_MEM" Type="Bug/Weakness">Memory Bugs (incl. Corruption Errors)</Definition>
		<Definition Name="_CRY" Type="Bug/Weakness">Cryptographic Store or Transfer Bugs</Definition>
		<Definition Name="_RND" Type="Bug/Weakness">Random Number Generation Bugs</Definition>
		<Definition Name="_ACC" Type="Bug/Weakness">Access Control Bugs</Definition>
		<Definition Name="_FLR">xxx</Definition>

		<!-- Classes-->
		<!-- _INP-->
		<Definition Name="DVL">Data are validated (syntax check) or sanitized (escape, filter, repair) improperly.</Definition>
		<Definition Name="DVR">Data are verified (semantics check) or corrected (assign value, remove) improperly.</Definition>
		<!-- _DTC -- xxx change everywhere to _DAT-->
		<Definition Name="DCL">An object, a function, a type, or a namespace is declared or defined improperly.</Definition>
		<Definition Name="NRS">The name of an object, a function, or a data type is resolved improperly or bound to an improper data type or implementation.</Definition>
		<Definition Name="TCV">A data value is converted or coerced into another data type improperly.</Definition>
		<Definition Name="TCM">A numeric, pointer, or string value is calculated improperly of a condition is evaluated improperly.</Definition>
		<!-- _MEM-->
		<Definition Name="MAD" Title="Memory Addressing Bugs">The pointer to an object is initialized, repositioned, or reassigned to animproper memory address.</Definition>
		<Definition Name="MAL">An object is allocated, extended, or reallocated (while extending) improperly.</Definition>
		<Definition Name="MUS">An object is initialized, read, written, or cleared improperly.</Definition>
		<Definition Name="MDL">An object is deallocated, reduced, or reallocated (while reducing) improperly.</Definition>
		<Definition Name="ENC">Sensitive data (plaintext) are improperly transformed into unintelligible form (ciphertext) using a cryptographic algorithm and key(s).</Definition>
		<!-- _CRY-->
		<Definition Name="VRF">Data is signed, source is checked and proved, or data is assured to be unaltered improperly.</Definition>
		<Definition Name="KMN">Cryptographic keys and other keying material are generated, stored, distributed, used, or destroyed improperly.</Definition>
		<Definition Name="TRN">A generated output does not satisfy all use-specifictrue-randomness requirements. The output sequence is of random bits, where values are obtained from one or more sources of entropy.</Definition>
		<Definition Name="PRN">A generated output does not satisfy all use-specificpseudo-randomness requirements. The output sequence is of random bits or numbers from a PRNG.</Definition>
		<!-- _ACC-->
		<Definition Name="ATN">xxx</Definition>
		<Definition Name="ATZ">xxx</Definition>
		<Definition Name="IEX">xxx</Definition>
		<!-- _FLR-->
		<Definition Name="RCE">xxx</Definition>
		<Definition Name="DOS">xxx</Definition>

		<!-- Atributes-->
		<Definition Name="Mechanism">Explains how the buggy operation is performed.</Definition>
		<Definition Name="Source Code">Explains where the bug is in the operation and in the program.</Definition>
		<Definition Name="Execution Space">Explains where the buggy operation code is running.</Definition>
		<Definition Name="State">xxx</Definition>
		<Definition Name="Policy">Lists or rules for checking data syntax and semantics. For example, safelist, denylist, format (e.g., DTD-XML Document Type Definition), and length; or value (incl. NULL or list of values), quantity, range, and type (e.g., a PowerPoint XSD).</Definition>
		<Definition Name="Entity">Each data type bug or weakness involves one data type related operation. Each of these operations is over an entity: object, function, data type, or namespace. An entity is referred in source code via its declared name.</Definition>
		<Definition Name="Data Type Kind">Primitive, Structured. A data type can be a primitive data type (scalar) or a structured data type (composite).</Definition>
		<Definition Name="Data Value Kind">Numeric, Text, Pointer, Boolean.</Definition>
		<Definition Name="Location">xxx</Definition>
		<Definition Name="Ownership">xxx</Definition>

		<!--xxx need Mechanism for each class in _DTC-->
		<Definition Name="Mechanism (DCL)">xxx.</Definition>
		<Definition Name="Mechanism (NRS)">xxx.</Definition>
		<Definition Name="Mechanism (TCV)">xxx.</Definition>
		<Definition Name="Mechanism (TCM)">Function, Operator, Method, Lambda Expression, Procedure. Shows which operator or method uses data type(s) improperly.</Definition>

		<!-- Bug Causes-->
		<Definition Name="Improper Operation">The Bug is a Coding Error OR xxx rules.</Definition>
		<Definition Name="Improper Policy">xxx</Definition>
		<Definition Name="Improper Policy Data">xxx</Definition>
		<Definition Name="Improper Modifier">The declaration of an entity may be prefixed by a modifier that enforces required restrictions. For example, access modifiers restrict whether and how a data type, an object, or a function can be used outside its declaration scope.</Definition>
		<Definition Name="Improper Scope">A scope is a block of code (e.g. { }) where a name is valid, i.e., associated with exactly one entity. Scopes provide the Type System with a context for names lookup, i.e., what namespaces and in which order should be referred to resolve the name.</Definition>

		<!-- Weakness Causes - these are also bug/wealness Conseqeunces-->
		<Definition Name="Improper Data" >xxx</Definition>
		<Definition Name="Improper Data Type">Input To Next Operationxxx</Definition>
		<Definition Name="Improper Function">Input To Next Operation. A function is defined by its block of code – the function implementation.</Definition>
		<Definition Name="Improper Object">Input To Next Operationxxx</Definition>
		<Definition Name="Improper Data Value">Input To Next Operationxxx</Definition>
		<Definition Name="Improper Data Type (_DTC)">Input To Next Operation. A data type defines a set or a range of values (e.g. char is [-128, 127]) and the operations allowed over them (e.g. +, *, mod).xxx</Definition>
		<Definition Name="Improper Object Address">Input To Next Operationxxx</Definition>
		<Definition Name="Improper Object Size">xxx</Definition>
		<Definition Name="Improper Key">xxx</Definition>

		<!-- Final Errors-->
		<Definition Name="Injection Error">xxx</Definition>
		<Definition Name="Memory Error">xxx</Definition>
		<Definition Name="Access Error">xxx</Definition>
		<Definition Name="Type Compute Error">xxx</Definition>

		<!-- Values-->
		<!--_INP Cluster-->
		<Definition Name="Validate">Check data syntax (proper form/grammar) in order to accept (and possibly sanitize) or reject it. Includes checking for missing symbols/elements.</Definition>
		<Definition Name="Sanitize">Modify data (neutralize/escape, filter/remove, repair/add symbols) in order to make it valid (well-formed).</Definition>
		<Definition Name="Verify">Check data semantics (proper value/meaning) in order to accept (and possibly correct) or reject it.</Definition>
		<Definition Name="Correct">Modify data (assign new value, remove), in order to make it accurate.</Definition>
		<Definition Name="Missing">The operation is absent.</Definition>
		<Definition Name="Erroneous (_INP)">There's a bug in the operation implementation (incl. how it checks against a policy).</Definition>
		<Definition Name="Under-Restrictive Policy">Accepts bad data.</Definition>
		<Definition Name="Over-Restrictive Policy">Rejects good data.</Definition>
		<Definition Name="Data">A string of characters (symbols like letter, digit, punctuation) with clearly defined syntax and semantics.</Definition>
		<Definition Name="Corrupted Data">Unintentionally modified data due to a previous weakness (e.g., with a decompress or a decrypt operation) that if not sanitized would end-up as invalid data for next weakness.</Definition>
		<Definition Name="Tampered Data">Maliciously modified data due to a previous weakness (e.g., with a deserialize, authorize, or crypto verify operation) that would lead to injection error.</Definition>
		<Definition Name="Invalid Data">Data with harmed syntax due to sanitization errors.</Definition>
		<Definition Name="Corrupted Policy">Unintentionally modified policy due to a previous weakness (e.g., with a decompress operation).</Definition>
		<Definition Name="Tampered Policy">Maliciously modified policy due to a previous weakness (e.g., with an authorize operation).</Definition>
		<Definition Name="Wrong Value (_INP)">Data with harmed semantics; not accurate value (e.g., outside of a range).</Definition>
		<Definition Name="Inconsistent Value">Data value is inconsistent with the value of a related data (e.g., inconstancy between the value of a size variable and the actual buffer size).</Definition>
		<Definition Name="Wrong Type (_INP)">Data with wrong data type.</Definition>
		<Definition Name="Query Injection">Malicious insertion of condition parts (e.g., or 1==1) or entire commands (e.g., drop table) into an input used to construct a database query.</Definition>
		<Definition Name="Command Injection">Malicious insertion of new commands into the input to a command that is sent to an operating system (OS) or to a server.</Definition>
		<Definition Name="Source Code Injection">Malicious insertion of new code (incl. with &lt;&gt; elements) into input used as part of an executing application code.</Definition>
		<Definition Name="Parameter Injection">Malicious insertion of data (e.g., with &amp; parameter separator) into input used as parameter/argument in other parts of code.</Definition>
		<Definition Name="File Injection">Malicious insertion of data (e.g., with .. and / or with file entries) into input used to access/modify files or as file content.</Definition>
		<Definition Name="Codebase">The operation is in the programmer's code - in the application itself.</Definition>
		<Definition Name="Third Party">The operation is in a third-party library.</Definition>
		<Definition Name="Standard Library">The operation is in the standard library for a particular programming language.</Definition>
		<Definition Name="Compiler/Interpreter">The operation is in the language processor that allows execution or creates executables (compiler, assembler, interpreter).</Definition>
		<Definition Name="Local">The bugged code runs in an environment with access control policy with limited (local user) permission.</Definition>
		<Definition Name="Admin">The bugged code runs in an environment with access control policy with unlimited (admin user) permission.</Definition>
		<Definition Name="Bare-Metal">The bugged code runs in an environment without privilege control. Usually, the program is the only software running and has total access to the hardware.</Definition>
		<Definition Name="Entered">Data comes from user interface (e.g., text field).</Definition>
		<Definition Name="Stored">Data comes from permanent storage (e.g., file, database on a storage device).</Definition>
		<Definition Name="In Use">Data comes from volatile storage (e.g., RAM, cache memory).</Definition>
		<Definition Name="Transferred">Data comes via network (e.g., connecting analog device or another computer).</Definition>
		<Definition Name="Safelist">Policy based on a set of known good content.</Definition>
		<Definition Name="Denylist">Policy based on a set of known bad content; helps reject outright maliciously malformed data.</Definition>
		<Definition Name="Format">Policy based on syntax format (e.g., defined via regular expression).</Definition>
		<Definition Name="Length">Policy based on allowed number of characters in data. Note that this is not about the data value as size of an object.</Definition>
		<Definition Name="Value">Check data for a specific value (incl. NULL or list of values).</Definition>
		<Definition Name="Quantity">Check data for a specific measurable value (e.g., size, time, rate, frequency).</Definition>
		<Definition Name="Range">Check data are within a (min, max) interval.</Definition>
		<Definition Name="Type">Check data type (e.g., int, float, XSD-XML Schema Definition, or specific structure/object).</Definition>
		<Definition Name="Other Rules">Check data against other business logic.</Definition>

		<!--_DTC Cluster-->
		<Definition Name="Declare">Specify name and type of an object; name, return type, and parameters of a function; or name and type parameters of a type.</Definition>
		<Definition Name="Define">Specify data of an object; implementation of a function; or member objects and functions of a type.Refe.</Definition>
		<Definition Name="Refer">Use a name in local or remote scopes of source code. The Type System resolves the name and binds a data type to it.</Definition>
		<Definition Name="Call">Invoke a function implementation. The Type System binds the implementation to the resolved function name. A polymorphic implementation is first resolved and then bound.</Definition>
		<Definition Name="Cast">Explicitly convert the value of an object to another data type.</Definition>
		<Definition Name="Coerce">Implicitly (forced by the Type System) convert the value of a passed in/out argument or the return into the corresponding parameter or return data type. (Type Coercion is known also as Type Juggling..</Definition>
		<Definition Name="Calculate">Find the result of a numeric, pointer, or string operation.</Definition>
		<Definition Name="Evaluate">Find the result of a boolean condition (incl. comparison).</Definition>
		<!--<Definition Name="Missing">The operation is absent.</Definition>-->
		<Definition Name="Wrong">An inappropriate data type is specified; or an inappropriate function/operator is used.</Definition>
		<Definition Name="Erroneous (_DTC)">The Type System or a compute function implementation has a bug.</Definition>
		<Definition Name="Missing Modifier">A required behavioral restriction is absent.</Definition>
		<Definition Name="Wrong Modifier">A wrong behavioral restriction is specified.</Definition>
		<Definition Name="Anonymous Scope">The declaration is in an unnamed scope.</Definition>
		<Definition Name="Wrong Scope">The declaration should be in another scope.</Definition>
		<Definition Name="Missing Qualifier">A namespace include is absent; or a scope is not specified in a fully qualified name.</Definition>
		<Definition Name="Wrong Qualifier">A wrong namespace is included, or a wrong scope is specified in a fully qualified name.</Definition>
		<Definition Name="Object">A memory region used to store data.</Definition>
		<Definition Name="Data Value">A numeric, text, pointer/address, or boolean value stored in an object's memory.</Definition>
		<Definition Name="Data Type">A set of allowed values and the operations allowed over them.</Definition>
		<Definition Name="Function">An organized block of code that when called takes in data, processes it, and produces a result(s).</Definition>
		<Definition Name="Wrong Object Resolved Value">Object is resolved from wrong scope, so it's value might be wrong.</Definition>
		<Definition Name="Wrong Object Resolved Type">Object is resolved from wrong scope,so it's data type might be wrong.</Definition>
		<Definition Name="Reference vs. Object">Object's address instead of object's data value.</Definition>
		<Definition Name="Wrong Argument Value">Inaccurate input data value; i.e., non-verified for harmed semantics.</Definition>
		<Definition Name="Under Range">Data value is smaller than type's lower range.</Definition>
		<Definition Name="Over Range">Data value is larger than type's upper range.</Definition>
		<Definition Name="Flipped Sign">Sign bit is overwritten from type related calculation.</Definition>
		<Definition Name="Wrong Result">Incorrect value from type conversion or computation.</Definition>
		<Definition Name="Wrap Around">A moved around-the-clock value over its data type upper or lower range, as it exceeds that range. (Integer Over-/Under-flow is a wrapped-around the upper/lower range integer value; may become very small/large and change to the opposite sign..</Definition>
		<Definition Name="Truncated Value">Rightmost bits of value that won’t fit type size are cut off.</Definition>
		<Definition Name="Distorted Value">Incorrect value (although fits type size) due to sign flip or signed/unsigned and vice versa conversions.</Definition>
		<Definition Name="Rounded Value">Real number value precision loss.</Definition>
		<Definition Name="Wrong Sign Type">Unsigned instead of signed data type is specified or vise versa.</Definition>
		<Definition Name="Wrong Precision Type">Higher precision data type is needed (e.g. double instead of float).</Definition>
		<Definition Name="Incomplete Type">Specific constructor, method, or overloaded function is missing.</Definition>
		<Definition Name="Mismatched Argument Type">Argument's data type is different from function's parameter data type.</Definition>
		<Definition Name="Wrong Generic Type">Generic object instantiated via wrong type argument.</Definition>
		<Definition Name="Confused Subtype">Object invoking an overriden function is of wrong subtype data type.</Definition>
		<Definition Name="Wrong Argument Type">Argument to an overloaded function is of wrong data type.</Definition>
		<Definition Name="Missing Overridden Function">Function implementation in a particular subclass is absent.</Definition>
		<Definition Name="Missing Overloaded Function">Implementation for particular function parameters' data types is absent.</Definition>
		<Definition Name="Wrong Type (_DTC)">Data type range or structure is not correct.</Definition>
		<Definition Name="Wrong Type Resolved">Data type is resolved from wrong scope.</Definition>
		<Definition Name="Wrong Function Resolved">Function is resolved from wrong scope.</Definition>
		<Definition Name="Wrong Generic Function Bound">Implementation for a wrong data type is bound due to wrong generic type arguments.</Definition>
		<Definition Name="Wrong Overridden Function Bound">Implementation from wrong subtype is bound due to a wrong invoking subtype object.</Definition>
		<Definition Name="Wrong Overloaded Function Bound">Wrong overloaded implementation is bound due to wrong function arguments.</Definition>
		<Definition Name="Wrong Access Object">Unauthorized access to an object exposes sensitive data or allows access to member functions.</Definition>
		<Definition Name="Wrong Access Type">Unauthorized access to a data type allows access to member objects and functions.</Definition>
		<Definition Name="Wrong Access Function">Unauthorized access to a function.</Definition>
		<Definition Name="Undefined">The Type System cannon represent the computation result (e.g. division by 0).</Definition>
		<!--<Definition Name="Codebase">The operation is in the programmer's code - in the application itself.</Definition>
		<Definition Name="Third Party">The operation is in a third-party library.</Definition>
		<Definition Name="Standard Library">The operation is in the standard library for a particular programming language.</Definition>
		<Definition Name="Compiler/Interpreter">The operation is in the language processor that allows execution or creates executables (compiler, assembler, interpreter).</Definition>-->
		<Definition Name="Primitive">Mimics the hardware units and is not built from other data types - e.g. int (long, short, signed), float, double, string, boolean.</Definition>
		<Definition Name="Structured">Builds of other data types; have members of primitive and/or structured data types - e.g. array, record, struct, union, class, interface.</Definition>
		<Definition Name="Simple">A non-polymorphic entity.</Definition>
		<Definition Name="Generics">An entity parameterized by type.</Definition>
		<Definition Name="Overloading">Functions with the same name in the same declaration scope, but implemented with different signature.</Definition>
		<Definition Name="Overriding">Functions with the same name as one in the base type, but implemented in different subtypes.</Definition>
		<Definition Name="Resolve">Look up entity name and if needed determine data type (infer from value, through hierarchy, via generic type attribute).</Definition>
		<Definition Name="Bind">Connect object data type, function return type, parameter data type, or simple function implementation.</Definition>
		<Definition Name="Early Bind">Resolve subtype and set generic function implementation.</Definition>
		<Definition Name="Late Bind">Resolve overriden function via subtype object and set implementation.</Definition>
		<Definition Name="Ad-hoc Bind">Resolve overloaded function via signature and set implementation.</Definition>
		<Definition Name="Pass In">Supply "in" arguments' data values to a function/ operator.</Definition>
		<Definition Name="Pass Out">Supply "out" or "in/out" arguments' data values or a return value to a function/ operator.</Definition>
		<!--<Definition Name="Function">An organized block of code that when called takes in data, processes it, and returns a result.</Definition>-->
		<Definition Name="Operator">A function with a symbolic name that implements a mathematical, relational or logical operation.</Definition>
		<Definition Name="Method">A member function of an OOP class.</Definition>
		<Definition Name="Lambda Expression">An anonymous function, implemented within another function.</Definition>
		<Definition Name="Procedure">A function with a void return type.</Definition>
		<!--<Definition Name="Object">A memory region used to store data.</Definition>-->
		<!--<Definition Name="Function">An organized block of code that when called takes in data, processes it, and returns a result.</Definition>-->
		<!--<Definition Name="Data Type">A set or a range of values and the operations allowed over them.</Definition>-->
		<Definition Name="Namespace">An organization of entities' names, utilized to avoid names collision.</Definition>
		<Definition Name="Numeric">A number stored in an object's memory.</Definition>
		<Definition Name="Text">A string stored in an object's memory.</Definition>
		<Definition Name="Pointer">A holder of the memory address of an object.</Definition>
		<Definition Name="Boolean">A truth value (true or false; 1 or 0), stored in an object's memory.</Definition>

		<!--_MEM Cluster-->
		<Definition Name="Initialize (pointer)">The first  assign  of  an  object  address  to  a  pointer; positions  the  pointer  at  the  start  of  the  object..</Definition>
		<Definition Name="Reposition">Changes the pointer to another position inside  its  object..</Definition>
		<Definition Name="Reassign">Changes the  pointer  to  a  different  object..</Definition>
		<Definition Name="Allocate">Reserves space in memory for an object; defines its initial boundaries and size..</Definition>
		<Definition Name="Extend">Allocates additional memory for an object in the same space; redefines its boundaries and size..</Definition>
		<Definition Name="Reallocate–Extend">Allocates a new larger piece of memory for an object at a new address, copies the object content there, reassigns its pointer, and deallocates the previous piece of memory..</Definition>
		<Definition Name="Initialize (object)"> The first write into an object, after it is allocated..</Definition>
		<Definition Name="Read">Gets content from an object..</Definition>
		<Definition Name="Write">Puts content into an object..</Definition>
		<Definition Name="Clear">The very last write into an object, before it is deallocated..</Definition>
		<Definition Name="Dereference">Overreaches Initialize, Read, Write, and Clear, focus is on object access, no matter if it’s for reading or for writing.</Definition>
		<Definition Name="Deallocate">Releases the allocated memory of an object..</Definition>
		<Definition Name="Reduce">Deallocates part of the object memory; redefines its boundaries and size..</Definition>
		<Definition Name="Reallocate–Reduce">Allocates a new smaller space in memory for an object at a new address, copies part of the object content there, reassigns the pointer, and deallocates the previous piece of memory..</Definition>
		<!--<Definition Name="Missing">The operation is absent.</Definition>-->
		<Definition Name="Mismatched">The deallocation function does not match the allocation function used for the same object.</Definition>
		<Definition Name="Erroneous (_MEM)">There is a bug is in the implementation of the operation.</Definition>
		<!--<Definition Name="Object">A memory region used to store data.</Definition>-->
		<!--<Definition Name="Pointer">A holder of the memory address of an object.</Definition>-->
		<Definition Name="NULL Pointer">Points to the zero address, a specific invalid address.</Definition>
		<Definition Name="Wild Pointer">Points to an arbitrary address, because it has not been initialized or an erroneous allocation routine is used.</Definition>
		<Definition Name="Dangling Pointer">Still points to the address of its successfully deallocated object.</Definition>
		<Definition Name="Over Bounds Pointer">Points after/over the upper bound for its object.</Definition>
		<Definition Name="Wrong Position Pointer">Points to a miscalculated position inside its object bounds.</Definition>
		<Definition Name="Under Bounds Pointer">Points before/under the lower bound of its object.</Definition>
		<Definition Name="Untrusted Pointer">The pointer is modified to an improperly checked address.</Definition>
		<Definition Name="Hardcoded Address">The pointer points a wrong specific address.</Definition>
		<Definition Name="Casted Pointer">The pointer does not match the type of the object, due to wrong type casting.</Definition>
		<Definition Name="Forbidden Address">The pointer points to an OS protected or non-existing address.</Definition>
		<Definition Name="Address of Single Owned Object">The only pointer of an already allocated object is used to allocate a new object.</Definition>
		<Definition Name="Not Enough Memory Allocated">The allocated memory is too little for the data it should store.</Definition>
		<Definition Name="Wrong Size Used">The value used as size does not match the real size of the object.</Definition>
		<Definition Name="Memory Overflow">More memory requested than available.</Definition>
		<Definition Name="Memory Leak">An object has no pointer pointing to it.</Definition>
		<Definition Name="Double Free">Attempt to deallocate a deallocated object or via an uninitialized pointer.</Definition>
		<Definition Name="Object Corruption">Object data is unintentionally altered.</Definition>
		<Definition Name="Uninitialized Object">Object data is not filled in before use.</Definition>
		<Definition Name="Not Cleared Object">Object data not overwritten before deallocation.</Definition>
		<Definition Name="NULL Pointer Dereference">Attempt to access an object for read or write through a NULL pointer.</Definition>
		<Definition Name="Untrusted Pointer Dereference">Attempt to access an object via an altered pointer (not legitimate dereference of tainted pointers).</Definition>
		<Definition Name="Type Confusion">Pointer and object have different types.</Definition>
		<Definition Name="Use After Free">Attempt to use a deallocated object.</Definition>
		<Definition Name="Buffer Overflow">Read or write above the object upper bound.</Definition>
		<Definition Name="Buffer Underflow">Read or write below the object lower bounds.</Definition>
		<Definition Name="Uninitialized Pointer Dereference">An attempt to access an object for read or write via an uninitialized pointer.</Definition>
		<!--<Definition Name="Codebase">The operation is in programmer's code - in the application itself.</Definition>
		<Definition Name="Third Party">The operation is in a third party library.</Definition>
		<Definition Name="Standard Library">The operation is in the standard library for a particular programming language.</Definition>
		<Definition Name="Compiler/Interpreter">The operation is in the language processor that allows execution or creates executables (compiler, assembler, interpreter).</Definition>-->
		<Definition Name="Userland">The bugged code runs in an environment with privilege levels, but in unprivileged mode (e.g., ring 3 in x86 architecture).</Definition>
		<Definition Name="Kernel">The bugged code runs in an environment with privilege levels with access privileged instructions (e.g., ring 0 in x86 architecture).</Definition>
		<!--<Definition Name="Bare-Metal">The bugged code runs in an environment without privilege control. Usually, the program is the only software running and has total access to the hardware.</Definition>-->
		<Definition Name="Stack">The object is a non-static local variable (defined in a function, a passed parameters, or a function return address).</Definition>
		<Definition Name="Heap">The object is a dynamically allocated data structure (e.g., via malloc() and new).</Definition>
		<Definition Name="Direct">The operation is performed over a particular object element.</Definition>
		<Definition Name="Sequential">The operation is performed after iterating over the object elements.</Definition>
		<Definition Name="Implicit">The operation is performed without a function call.</Definition>
		<Definition Name="Explicit">The operation is performed by a function/ method) call.</Definition>
		<Definition Name="None">The object has no owner.</Definition>
		<Definition Name="Single">The object has one owner.</Definition>
		<Definition Name="Shared">The object has more than one owner.</Definition>
		<Definition Name="Little">A few bytes of memory are accessed.</Definition>
		<Definition Name="Moderate">Several bytes of memory are accessed, but less than 1 KB.</Definition>
		<Definition Name="Huge">More than 1 KB of memory is accessed.</Definition>


		<!--NOTES - DISCUSS-->
		<!--Operands-->
		<!--xxxNeed to update - see DTC slides-->
		<!--<Definition Name="Object">A memory region used to store data. xxxThe data could be a primitive data, such as integer or boolean; or a data structure, such as array, record, or OOP class.</Definition>
<Definition Name="Pointer">A holder of the memory address of an object.</Definition>
<Definition Name="Data">A string of characters (symbols like letter, digit, punctuation) with clearly defined syntax and semantics.</Definition>-->
		<!--CG: It is kind of the policy is operand and we also have policy on operations.-->
		<!--xxxIB: It's the same with Data, so this should be fine.-->
		<!--<Definition Name="Policy">Lists or rules for checking data syntax and semantics. For example, safelist, denylist, format (e.g., DTD-XML Document Type Definition), and length; or value (incl. NULL or list of values), quantity, range, and type (e.g., a PowerPoint XSD).</Definition>-->

		<!--Improper Size/Object-->
		<!--<Definition Name="Not Enough Memory Allocated">The allocated memory is too little for the data it should store.</Definition>-->
		<!--IB: new suggestion: Not Enough Memory Allocated???-->

		<!--_MEM Final Errors-->
		<!--CG: We need to straight up the definitions here. Some are defined as actions (Null pointer dereference) others as things(Type confusion). I think all of them should be defined as action/attempts-->
		<!--<Definition Name="Memory Overflow">More memory requested than available. Risk: Stack/heap exhaustion.</Definition>
<Definition Name="Memory Leak">An object has no pointer pointing to it. Risk: Resource exhaustion.Application crash. DoS.</Definition>
<Definition Name="Double Free">Attempt to deallocate a deallocated object or via an uninitialized pointer. Risk: Arbitrary code execution.</Definition>
<Definition Name="Object Corruption">Object data is unintentionally altered. Wrong/unexpected results.</Definition>
<Definition Name="Uninitialized Object">Object data is not filled inbefore use. Controlled or left over data.</Definition>
<Definition Name="Not Cleared Object">Object data not overwritten before deallocation. Information exposure (e.g. private keys).</Definition>
<Definition Name="NULL Pointer Dereference"> Attempt to access an object for read or write through a NULL pointer. Program crash. Arbitrary code execution (in some OSs).</Definition>
<Definition Name="Untrusted Pointer Dereference"> Attempt to access an object via an altered pointer (not legitimate dereference of tainted pointers).DoS. Arbitrary code execution.</Definition>
<Definition Name="Type Confusion">Pointer and object have different types.  Vtable corruption. Hijack.</Definition>
<Definition Name="Use After Free">Attempt to use a deallocated object. Arbitrary code execution.</Definition>
<Definition Name="Buffer Overflow">Read or write above the object upper bound. Arbitrary code execution. Information exposure."</Definition>
<Definition Name="Buffer Underflow">Read or write below the object lower bounds. Arbitrary code execution. Information exposure.</Definition>
<Definition Name="Uninitialized Pointer Dereference"> An attempt to access an object for read or write via an uninitialized pointer. Control flow hijack.</Definition>-->

		<!--_INP:Final Errors-->
		<!--CG: Should we put examples in the definition?-->
		<!--<Definition Name="Query Injection">Malicious insertion of condition parts (e.g., or 1==1) or entire commands (e.g., drop table) into an input used to construct a database query.</Definition>
<Definition Name="Command Injection">Malicious insertion of new commands into the input to a command that is sent to an operating system (OS) or to a server.</Definition>
<Definition Name="Source Code Injection">Injection Malicious insertion of new code (incl. with &lt; &gt; elements) into input used as part of an executing application code.</Definition>
<Definition Name="Parameter Injection">Malicious insertion of data (e.g., with &amp; parameter separator) into input used as parameter/ argument in other parts of code.</Definition>
<Definition Name="File Injection">Malicious insertion of data (e.g., with .. and / or with file entries) into input used to access/ modify files or as file content.</Definition>-->

		<!--_INP Mechanism-->
		<!--Should we keep the examples in parenthesis?-->
		<!--<Definition Name="Safelist">Policy based on a set of known good content.</Definition>
<Definition Name="Denylist">Policy based on a set of known bad content; helps reject outright maliciously malformed data.</Definition>
<Definition Name="Format">Policy based on syntax format (e.g., defined via regular expression).</Definition>
<Definition Name="Length">Policy based on allowed number of characters in data. Note that this is not about the data value as size of an object.</Definition>-->
		<!--Be careful - we have a value named Value and a value named Type, which could be confusioning.-->
		<!--<Definition Name="Value">Check data for a specific value ( incl. NULL or list of values).</Definition>-->
		<!--END NOTES - DISCUSS-->

		<!--Common Terms - xxx can use them as tooltips for labels-->
		<Definition Name="Bug">
			A coding error that needs to be fixed.
			BF: Caused by an improper operation or rule (e.g. policy, scope, modifier) - the underlying start error of a vulnerability.
		</Definition>
		<Definition Name="Weakness">
			Caused by a bug or ill-formed data. A weakness type is also a meaningful notion, as different vulnerabilities may have the same type of underlying weaknesses.
			BF: Caused by an improper operand that is result from the operation of a previous bug/weakness: improper object (address, size), data (type, value), function (signature, implementation), or rule as object (e.g. policy data) - underlying intermediate error of a vulnerability.
		</Definition>
		<Definition Name="Vulnerability">
			An instance of a weakness type that leads to a security failure. It may have more than one underlying weaknesses linked by causality.
			BF: A bug[-weakness(es)]-failure(s) chain formed by consequence-cause transitions.
		</Definition>
		<Definition Name="Final Error">
			Undefined or exploitable system behavior.
			BF: A conseqeunce of the last element of a bug[-weakness(es)] vulnerability chain.
		</Definition>
		<Definition Name="Failure">
			A violation of a system security requirement.
			BF: Caused by a final error consequence. Several vulnerability chains might converge at this final error conseqeunce to cause the failure.
		</Definition>

		<Definition Name="BF Class">xxx</Definition>
		<Definition Name="Cause">xxx</Definition>
		<Definition Name="Consequence">xxx</Definition>


		<!--NOTE: Erroneous, Wrong Type, and others may be slightly different in each cluster - so, using (_INP), etc. -->
		<!--xxx define also the Group Names such as "Improper Data Value"-->
		<!--NOTE: Improper Data in DVL is like the parent of Improper Data Value and Improper Data Type - so each of these should be able to connect to an Improper Data cause for next weakness-->


		<!--The operation attributes Source Code and Execution Space explain where a bug is – where the operation is in the program and where its code runs.-->
		<!--Improper Operation - "The Bug" - could be improper code or improper rules (Policy, Keying Material, Domain Parameter) code that has to be fixed to resolve to vulnerablity cause by this bug."-->

	</Definitions>




</BF>